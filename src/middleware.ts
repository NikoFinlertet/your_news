/*
    –í–æ –∏–º—è –û—Ç—Ü–∞, –°—ã–Ω–∞ –∏ –°–≤—è—Ç–æ–≥–æ Git'–∞,
–ê–º–∏–Ω—å.

–û, –í–µ–ª–∏–∫–∏–π –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä, –≤–Ω–µ–º–ª–∏ –º–æ–ª—å–±–∞–º —Å—Ç—Ä–∞–∂–¥—É—â–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!
–ò–∑–±–∞–≤—å –Ω–∞—Å –æ—Ç —Ü–∏–∫–ª–æ–≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö, –æ—Ç NullPointer‚Äô–æ–≤ –≤–Ω–µ–∑–∞–ø–Ω—ã—Ö,
–û—Ç –∫–æ–¥–∞, —á—Ç–æ –∑–∞–ø—É—Ç–∞–Ω–Ω–µ–µ –ø–∞—É—Ç–∏–Ω—ã –≤ –ø–æ–¥–≤–∞–ª–µ —Å—Ç–∞—Ä–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
–°–ø–∞—Å–∏ –æ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–µ–∑ –∏–º–µ–Ω–∏, –æ—Ç —Ñ—É–Ω–∫—Ü–∏–π-—Ç–∏—Ç–∞–Ω–æ–≤ –Ω–∞ —Ç—ã—Å—è—á—É —Å—Ç—Ä–æ–∫,
–û—Ç –º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤, —á—Ç–æ –∏—Å—á–µ–∑–∞—é—Ç –ø—Ä–∏ –≤–∑–≥–ª—è–¥–µ –º–µ–Ω—Ç–æ—Ä–∞.

–î–∞–π –Ω–∞–º —Å–∏–ª—É —É–¥–∞–ª–∏—Ç—å legacy, —á—Ç–æ —Ç—è–Ω–µ—Ç—Å—è, –∫–∞–∫ –ª–∞–ø—à–∞, –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å,
–ò –º—É–¥—Ä–æ—Å—Ç—å, —á—Ç–æ–±—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–∏—Å–∞—Ç—å, –∞ –Ω–µ –Ω–∞–¥–µ—è—Ç—å—Å—è –Ω–∞ –ø–∞–º—è—Ç—å.
–ù–∞—É—á–∏ –Ω–∞—Å –±–ª–∞–≥–æ–¥–∞—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞, —Ç–µ—Ä–ø–µ–Ω–∏—é Code Review,
–ò –æ—Å–µ–Ω–∏ –ª—É—á–æ–º –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤, –¥–∞–±—ã –Ω–µ —Ç—Ä–µ–ø–µ—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –≤ –ø—è—Ç–Ω–∏—Ü—É.

–ó–∞—â–∏—Ç–∏, –æ –ê–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ü–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å, –æ—Ç –∏—Å–∫—É—à–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å Stack Overflow,
–ò –≤—Ä–∞–∑—É–º–∏ –∫–æ–ª–ª–µ–≥, —á—Ç–æ –ø–ª–æ–¥—è—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞ –∏ —Ö–∞—Ä–¥–∫–æ–¥—è—Ç —Å–≤—è—Ç—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏.
–ü—É—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –º–∏—Ñ–æ–º, –∞ CI/CD –Ω–µ —Å—Ç–∞–Ω–µ—Ç –∞–¥–æ–º.
–î–∞ –ø—Ä–∏–∏–¥–µ—Ç Pull Request –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, –∏ –¥–∞ –º–∏–Ω—É–µ—Ç –Ω–∞—Å –≥–Ω–µ–≤ —Ç–∏–º–ª–∏–¥–∞.

–í–æ –∏–º—è –ë–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–≥–æ –°–µ—Ä–≤–µ—Ä–∞, –Æ–∑–∞–±–∏–ª–∏—Ç–∏ –∏ –ß–∏—Å—Ç–æ–π –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã,
–ê–º–∏–Ω—å.

P.S.: –ò –ø—Ä–æ—Å—Ç–∏ –Ω–∞–º –Ω–∞—à–∏ –∫–æ—Å—Ç—ã–ª–∏, –∏–±–æ –º—ã –Ω–µ –≤–µ–¥–∞–µ–º, —á—Ç–æ —Ç–≤–æ—Ä–∏–º.
‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉüòá Ctrl+S, Ctrl+S, Ctrl+S‚Ä¶

// –ê–≤—Ç–æ—Ä: —Å—Ç—Ä–∞–¥–∞–ª–µ—Ü, –ø–æ–∑–Ω–∞–≤—à–∏–π JavaScript –±–µ–∑ TypeScript.
    */



import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

const USER_ID_IN_COOKIES = 'yournews_user_id';
const USER_ID_IN_SEARCH_PARAMS = 'user_id';

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();

  const supabase = createMiddlewareClient({ req, res });
  await supabase.auth.getSession();

  const user_id_in_params = req.nextUrl.searchParams.get(USER_ID_IN_SEARCH_PARAMS);
  const user_id_in_cookies = req.cookies.get(USER_ID_IN_COOKIES)?.value;

  const user_id = user_id_in_params || user_id_in_cookies;


  // Not to spam redirects
  if (req.nextUrl.pathname === '/unauthorized' || req.nextUrl.pathname === '/home') {
    return res;
  }
  
  if (!user_id) {
    // No user_id provided neither in url searchParams nor in cookies
    return NextResponse.redirect(new URL('/unauthorized', req.url));
  }

  // Check user_id validity
  const { data, error } = await supabase
    .from('users')
    .select('*')
    .eq('id', user_id);
  if (error) {
    console.error('Supabase error:', error);
    return res;
  }

  if (!data || data.length === 0) {
    console.log('User not found: ', user_id);
    return NextResponse.redirect(new URL('/unauthorized', req.url));
  }

  // Check user sources
  const { data: sources, error: sourcesError } = await supabase
    .from('user_sources')
    .select('source_id')
    .eq('user_id', user_id);

  if (sourcesError) {
    console.error('Supabase error:', sourcesError);
    return res;
  }
/*
  if (
    (req.nextUrl.pathname !== '/unauthorized' && req.nextUrl.pathname !== '/settings')
    && (!data[0].description
    || !data[0].ai_profile
    || !data[0].name
    || !data[0].queries
    || !data[0].cron_pattern
    || !data[0].timezone
    || !sources || sources.length === 0)
  ) {
    // The profile is not completed
    console.log('Profile is not completed: ', user_id, req.nextUrl.pathname);

    if (!user_id_in_params) {
      return NextResponse.redirect(new URL('/settings', req.url));
    }


    // Delete user_id from searchParams
    const url = req.nextUrl.clone();
    url.searchParams.delete('user_id');
    req.nextUrl.pathname = url.pathname;
    req.nextUrl.search = url.search;

    const response = NextResponse.redirect(new URL('/settings', req.url));
    // Update cookies
    response.cookies.set(USER_ID_IN_COOKIES, user_id);
    
    return response;
  }
*/
  if (!user_id_in_params) {
    return res;
  }

  // Delete user_id from searchParams
  const url = req.nextUrl.clone();
  url.searchParams.delete('user_id');
  req.nextUrl.pathname = url.pathname;
  req.nextUrl.search = url.search;

  const response = NextResponse.redirect(url);
  // Update cookies
  response.cookies.set(USER_ID_IN_COOKIES, user_id);
  
  return response;
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|public/).*)',
  ],
};



